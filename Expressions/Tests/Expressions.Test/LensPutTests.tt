<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace NMF.Expressions.Test
{ 

    #region Helper

    static class ArrayExtensions
    {
        [LensPut(typeof(ArrayExtensions), "PutFirst")]
        public static T FirstOrDefault<T>(this T[] array)
        {
            return array != null && array.Length > 0 ? array[0] : default(T);
        }

        public static T[] PutFirst<T>(this T[] array, T element)
        {
            if (array != null && array.Length > 0)
            {
                array[0] = element;
                return array;
            }
            else if (EqualityComparer<T>.Default.Equals(element, default(T)))
            {
                return array;
            }
            else
            {
                return new T[] { element };
            }
        }        
    }

    #endregion

    [TestClass]
    public class LensPutTests
    {

<# 
foreach (var testOption in new[] { 
    new {name = "EmptyArray", array = "new int[] { }" },
    new {name = "NullArray", array = "null" },
    new {name = "InitializedArray", array = "new int[] { 0, 8, 15 }" }
} ){
#>
        #region <#= testOption.name #> tests
<#
    for(int i=1;i<=9;i++)
    {
#>        
        #region <#= testOption.name #> tests with <#= i #> parameters
        
        [TestMethod]
        public void PutGetFor<#= testOption.name #>Param<#= i #>()
        {
<# 
        for(int j=1;j<=i;j++)
        {
#>
            var dummy<#= j #> = new ObservableDummy<int[]>(<#= testOption.array #>);
<#
        }
#>
            var test = Observable.Reversable(() => dummy<#= i #>.Item.FirstOrDefault());

            Assert.AreEqual(0, test.Value);
            test.Value = 42;
            Assert.AreEqual(42, dummy<#= i #>.Item[0]);
<#  if(testOption.name == "InitializedArray")
{
#>
            // Arrays do not support an update notification for entries and therefore, the following assertions fails
            // Assert.AreEqual(42, test.Value);
<# 
    }
    else
    {
#>
            Assert.AreEqual(42, test.Value);
<#
    }
#>
        }

        [TestMethod]
        public void GetPutFor<#= testOption.name #>Param<#= i #>()
        {            
<# 
        for(int j=1;j<=i;j++)
        {
#>
            int[] array<#= j #> = <#= testOption.array #>;
            var dummy<#= j #> = new Dummy<int[]>(array<#= j #>);
<#
        }
#>
            var test = Observable.Reversable(() => dummy<#= i #>.Item.FirstOrDefault());

            Assert.AreEqual(0, test.Value);
            test.Value = 0;
            Assert.AreEqual(array<#= i #>, dummy<#= i #>.Item);
        }
        
        [TestMethod]
        public void PutGetFor<#= testOption.name #>WithFuncParam<#= i #>()
        {
<# 
        for(int j=1;j<=i;j++)
        {
#>
            var dummy<#= j #> = new ObservableDummy<int[]>(<#= testOption.array #>);
<#
        }
#>
            var func = Observable.Func<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int> ((<#= Interpolate("d{0}", ", ", i) #>) => d<#= i #>.Item.FirstOrDefault());
            var test = func.InvokeReversable(<#= Interpolate("dummy{0}", ", ", i) #>);

            Assert.AreEqual(0, test.Value);
            test.Value = 42;
            Assert.AreEqual(42, dummy<#= i #>.Item[0]);
<#  if(testOption.name == "InitializedArray")
{
#>
            // Arrays do not support an update notification for entries and therefore, the following assertions fails
            // Assert.AreEqual(42, test.Value);
<# 
    }
    else
    {
#>
            Assert.AreEqual(42, test.Value);
<#
    }
#>
        }

        [TestMethod]
        public void GetPutFor<#= testOption.name #>WithFuncParam<#= i #>()
        {
<# 
        for(int j=1;j<=i;j++)
        {
#>
            int[] array<#= j #> = <#= testOption.array #>;
            var dummy<#= j #> = new Dummy<int[]>(array<#= j #>);
<#
        }
#>            
            var func = Observable.Func<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int> ((<#= Interpolate("d{0}", ", ", i) #>) => d<#= i #>.Item.FirstOrDefault());
            var test = func.InvokeReversable(<#= Interpolate("dummy{0}", ", ", i) #>);

            Assert.AreEqual(0, test.Value);
            test.Value = 0;
            Assert.AreEqual(array<#= i #>, dummy<#= i #>.Item);
        }

        [TestMethod]
        public void PutGetForCompiled<#= testOption.name #>Param<#= i #>()
        {
            Func<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int> getter;
            Action<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int> setter;

            Expression<Func<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int>> expression = (<#= Interpolate("d{0}", ", ", i) #>) => d<#= i #>.Item.FirstOrDefault();

            getter = expression.Compile();
            var setExp = SetExpressionRewriter.CreateSetter(expression);
            setter = (Action<<#= Interpolate("Dummy<int[]>", ", ", i) #> , int>) setExp.Compile();
<# 
        for(int j=1;j<=i;j++)
        {
#>
            var dummy<#= j #> = new Dummy<int[]>(<#= testOption.array #>);
<#
        }
#>

            Assert.AreEqual(0, getter(<#= Interpolate("dummy{0}", ", ", i) #>));
            setter(<#= Interpolate("dummy{0}", ", ", i) #> , 42);
            Assert.AreEqual(42, dummy<#= i #>.Item[0]);
            Assert.AreEqual(42, getter(<#= Interpolate("dummy{0}", ", ", i) #>));
        }
        
        [TestMethod]
        public void GetPutForCompiled<#= testOption.name #>Param<#= i #>()
        {
            Func<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int> getter;
            Action<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int> setter;

            Expression<Func<<#= Interpolate("Dummy<int[]>", ", ", i) #>, int>> expression =(<#= Interpolate("d{0}", ", ", i) #>) => d<#= i #>.Item.FirstOrDefault();

            getter = expression.Compile();
            var setExp = SetExpressionRewriter.CreateSetter(expression);
            setter = (Action<<#= Interpolate("Dummy<int[]>", ", ", i) #> , int>) setExp.Compile();
<# 
        for(int j=1;j<=i;j++)
        {
#>
            int[] array<#= j #> = <#= testOption.array #>;
            var dummy<#= j #> = new Dummy<int[]>(array<#= j #>);
<#
        }
#>            

            Assert.AreEqual(0, getter(<#= Interpolate("dummy{0}", ", ", i) #>));
            setter(<#= Interpolate("dummy{0}", ", ", i) #>, 0);
            Assert.AreEqual(array<#= i #>, dummy<#= i #>.Item);
        }

        #endregion
<#
    }
#>
        #endregion
<#
}
#>
    }
}

<#+
    public string Interpolate(string str, string separator, int i){
        return String.Join(separator,Enumerable.Range(1, i).Select(x => String.Format(str, x)));
    }    
#>